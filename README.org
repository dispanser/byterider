* Byte Rider
** Introduction

Byte Rider is a Java library that aims to simplify bit field operations commonly
used to abuse primitive data types like long to store multiple flags or other
values inside a single value.

It's best illustrated with an example:

#+NAME: example
#+BEGIN_SRC java
	static ByteRider br = new ByteRider();
	private static final BoolField booleanField = br.addBool("booleanField");
	private static final IntField  intField     = br.addInt(-4, 4, "intField");
	private static final IntMappedObjField<SampleEnum> eField = br.addEnum(
			SampleEnum.class, "sample enum");

	private long data;

	public boolean booleanField() {return booleanField.get(data);}
	public void setBooleanField() {this.data = booleanField.set(data, true);}
	public void clearBooleanField() {this.data = booleanField.set(data, false);}

	public int intField() {return intField.get(data);}
	public void setIntField(int value) {this.data = intField.set(data, value);}

	public SampleEnum sampleEnum() {return eField.get(data);}
	public void setSampleEnum(SampleEnum e) {this.data = eField.set(data, e);}
#+END_SRC

Also see [[src/test/java/org/kulturguerilla/byterider/ByteRiderDemo.java][full example source, with comments.]]

The basic idea is to define a primitive type (~long data~ in our example), and
(ab)use its bits to store multiple smaller attributes, thereby decreasing memory
footprint and data locality, while avoiding the tedious and error-prone bit
shifting that is required when doing this manually.

** Example Usage

For a complete example, see [[src/test/java/org/kulturguerilla/byterider/ByteRiderDemo.java][Demo Source]].

** Supported Fields

*** Primitive Boolean (boolean)

Primitive boolean values are the simplest and thus most common form of bit voodoo.
A boolean consumes a single bit from the long value, and usage is straight forward:

#+BEGIN_SRC java
  private static final BoolField flag01 = br.addBool("flag01");

	public boolean booleanField() {
		return booleanField.get(data);
	}

	public void setBooleanField(boolean value) {
		this.data = booleanField.set(data, value);
	}
#+END_SRC

The ~get~ method accepts the underlying storage primitive and returns the
appropriate thing. The set method accepts the underlying storage primitive
and the new value, and returns the updated storage, which has to be written
to the storage field to actually perform the update.
*** Primitive Integer (int)

Primitive int values are stored by creating an ~IntField~, providing the
necessary boundaries (min and max values of range, inclusive):

#+BEGIN_SRC java
	private static final IntField intField  = br.addInt(-4, 4, "intField");
	private static final IntField intField2 = br.addInt(199, "intField2");
#+END_SRC

In the second line, we create an int field with ~minValue = 0~.

*** Enums

Enums are straight forward. You pass in the enum class, and everything is taken
care of. The actual storing is based on the ordinal of the enum instances.

#+BEGIN_SRC java
	private static final IntMappedObjField<SampleEnum> eField = br.addEnum(
			SampleEnum.class, "sample enum");
#+END_SRC


*** Arbitrary objects with known cardinality

The enum field from the previous section could also be written in its more
generic form, based on functions to convert from and to int values, like so:

#+BEGIN_SRC java
	private static final IntMappedObjField<SampleEnum> eField = br.addObj(
			SampleEnum.values().length,
			e -> e.ordinal(),
			i -> SampleEnum.values()[i],
		    "sample enum");
#+END_SRC

Other use cases might include automatic wrapping and unwrapping:

#+BEGIN_SRC java
public class LengthInMetres {
  public final len;
  public LengthInMetres(int len) {
    this.len = len;
  }
}
#+END_SRC

#+BEGIN_SRC java
	private static final IntMappedObjField<LengthInMetres> eField = br.addObj(
    32767, lm -> lm.len, LengthInMetres::new, "length");
#+END_SRC

Since in a typical JVM implementation, each ~LengthInMetres~ instance occupies
16 bytes of memory, and the reference in the attribute owner consumes another
4 bytes, it's possible to reduce heap size significantly.

It also reduces the number of long-living objects (length will become ephemeral).
** Not yet implemented
*** Nullable fields
Conveniently store ~Integer~, ~Long~, ~Enums~ or other objects that are nullable,
i.e. reserve a representation for null and handle it properly.

*** Wrapping unsafe, memory-mapped and byte buffers
